{"version":3,"sources":["components/Todo.js","components/Todos.js","components/Addtodo.js","components/layouts/Header.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Todo","setStyle","textDecoration","_this","props","todo","isCompleted","background","padding","borderBottom","react_default","a","createElement","style","this","type","onChange","onComplete","bind","id","title","btnStyle","onClick","delete","React","Component","color","border","borderRadius","cursor","float","Todos","todos","map","components_Todo","key","Addtodo","state","save","e","preventDefault","addTodo","setState","Object","defineProperty","target","name","value","onSubmit","display","flex","headerStyle","textAlign","linkStyle","Header","react_router_dom","to","About","Fragment","App","axios","post","then","resp","concat","toConsumableArray","data","filter","_this2","get","_this3","className","layouts_Header","react_router","path","component","exact","render","components_Addtodo","components_Todos","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0f17359.chunk.js","sourcesContent":["import React from 'react'\nclass Todo extends React.Component {\n    setStyle = () => {\n        return {\n            textDecoration: this.props.todo.isCompleted ? 'line-through' : 'none',\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n        }\n    }\n    render() {\n        return (\n            <div style={this.setStyle()}>\n                <input type=\"checkbox\" onChange={this.props.onComplete.bind(this, this.props.todo.id)} />{' '}\n                {this.props.todo.title}\n                <button style={btnStyle} onClick={this.props.delete.bind(this,this.props.todo.id)}>x</button>\n            </div>\n        )\n    }\n}\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n}\n\nexport default Todo","import React from 'react'\nimport Todo from './Todo';\nclass Todos extends React.Component {\n    render() {\n        return (\n            <div>\n            { this.props.todos.map((todo)=>(\n                <Todo key={todo.id} todo={todo} onComplete={this.props.onComplete} delete={this.props.delete}/>\n            )) }\n            </div>\n        )\n    }\n}\nexport default Todos","import React from 'react';\nimport Proptypes from 'prop-types';\n\nclass Addtodo extends React.Component {\n    state = {\n        todo: \"\"\n    }\n    save = (e) => {\n        e.preventDefault()\n        this.props.addTodo(this.state.todo)\n        this.setState({ todo: \"\" })\n    }\n    onChange = (e) => {\n        this.setState({\n            [e.target.name]: [e.target.value]\n        })\n    }\n    render() {\n        return (\n            <form onSubmit={this.save} style={{ display: 'flex' }}>\n                <input type=\"text\" name=\"todo\" onChange={this.onChange} value={this.state.todo} style={{ flex: '10', padding: '5px' }} />\n                <button style={{ flex: '1' }}>Submit</button>\n            </form>\n        )\n    }\n}\nAddtodo.propTypes = {\n    addTodo: Proptypes.func.isRequired\n}\nexport default Addtodo","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n            <Link style={linkStyle} to=\"/\">\n                Home\n            </Link>|\n            <Link style={linkStyle} to=\"/about\">\n                About\n            </Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\n\nexport default Header;","import React from 'react';\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.0. It is part of a React crash course</p>\n        </React.Fragment>\n    )\n}\nexport default About","import React from 'react';\nimport Todos from './components/Todos'\nimport './App.css';\n// import uuid from 'uuid';\nimport Addtodo from './components/Addtodo';\nimport Header from './components/layouts/Header';\nimport About from './components/pages/About';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    todos: []\n  }\n  onComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.isCompleted = !todo.isCompleted\n        }\n        return todo\n      })\n    })\n  }\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      isCompleted: false\n    }).then((resp) => {\n      this.setState({todos:[...this.state.todos, resp.data]})\n    })\n  }\n  delete = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then((resp)=>{\n      this.setState({\n        todos: [...this.state.todos.filter((todo) => todo.id !== id)]\n      })\n    })\n  }\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then((resp) => {\n      this.setState({ todos: resp.data })\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Header />\n          <Route path=\"/about\" component={About} />\n          <Route exact path=\"/\" render={(props) => (\n            <React.Fragment>\n              <Addtodo addTodo={this.addTodo} />\n              <Todos todos={this.state.todos} onComplete={this.onComplete} delete={this.delete} />\n            </React.Fragment>\n          )\n          } />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}